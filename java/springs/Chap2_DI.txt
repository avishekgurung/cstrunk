
DEPENDENCY INJECTION and INVERSION OF CONTROL (IOC) 

One of the most important concept of Spring is Dependency Injection and Inversion of Control.
We will start from the scratch and go in depth.

Lets say we have a class called Address. Lets say our another class called Employee wants to 
use this class called Address. So our normal implementation would be as follows:

class Employee{
	Address add;
	Employee(){
		add = new Address();
	}
}

So we see that we are creating an Address object, to be used in Employee class. So if 
the Address class has some parameters in constructors, etc, then we need to pass them. 
So here, we can say that Employee is tightly coupled with Address class. i.e. we see 
that Employee is dependant on Address and to use Employee we must always create 
Address object.

But using Dependency Injection is like, as follows:

class Employee{
	Address add;
	Employee(Address add){
		this.add = add;
	}
}

The class Employee does not worry about Address class, it does not have to create an object of
Address class neither worry about how it is being created. 
By DI the responsibility of creating objects of dependent class is shifted from our 
application code to Spring container hence the phenomenon is called IOC. All these things are
taken care by Spring Container by this feature of Dependency Injection. So we see that DI is 
making the classes less dependent on one another. 

So we can say that DI is like a glue that binds the two classes together yet at the same time 
makes them independant from one another. So as a result of DI, the testing of class Employee will 
be pretty easy as it does not depend upon Address and it also makes the class Address 
resuable by other classes.

The term Inversion of Control (IOC) and Dependency Injection (DI) are used interchangeably. IOC is 
achieved through DI. 

The IoC container is responsible to create, configure and manage the objects. These objects are 
called Beans.


Lets work on a same example as explained above using DI.

File: Address.java

package com.avishek;

public class Address {
	String city;
	int pincode;
	
	Address(String city, int pincode){
		this.city = city;
		this.pincode = pincode;
	}
	
	public String toString(){
		return city+" "+pincode;
	}
}

File: Employee.java

package com.avishek;
import com.avishek.Address;

public class Employee {
	Address add;
	String name;
	int age;
	Employee(Address add, String name, int age){
		this.add =  add;
		this.name = name;
		this.age = age;
	}
	
	public String toString(){
		return name+" : "+age+" : "+add;
	}
}

File: beansInfoList.xml

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd">

	<bean id = "addressBean" class="com.avishek.Address">
		<constructor-arg value="Bangalore"></constructor-arg>
		<constructor-arg value="560095"></constructor-arg>
	</bean>
	
	<bean id = "employeeBean" class="com.avishek.Employee">
		<constructor-arg ref="addressBean"></constructor-arg>
		<constructor-arg value="Avishek Gurung"></constructor-arg>
		<constructor-arg value="25"></constructor-arg>
	</bean>

</beans>

File: Main.java

package com.avishek;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import com.avishek.Student;

public class Main {
	public static void main(String[] args) {		
		ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("beansInfoList.xml");
		Employee employee = (Employee)context.getBean("employeeBean");
		System.out.println(employee);
	}
}


Dependency Injection can be achieved by using three ways:
1. 	Constructor Injection.
2.	Setter Injection.
3.	Interface Injection.

1. 	Constructor Injection.
	The constructor based injection is shown above. It does not matter whether the Address is
	using constructor or setter method.
	We can also create bean configuration as follows for the above example, using contructor
	injection as follows:

	<bean id = "employeeBean" class="com.avishek.Employee">
		<constructor-arg>
			<bean id = "addressBean" class="com.avishek.Address">
				<constructor-arg value="Bangalore"></constructor-arg>
				<constructor-arg value="560096"></constructor-arg>
			</bean>
		</constructor-arg>
		<constructor-arg value="Avishek Gurung"></constructor-arg>
		<constructor-arg value="25"></constructor-arg>
	</bean>

	Here the addressBean should be available only for the employeeBean.
	The constructor-arg created in the bean should be in the same order in which the parameters
	are present in the constructor.


2. Setter Injection
	The class needs to have setter methods to initialize the members.
	The spring bean configuration file is as follows:

	<?xml version="1.0" encoding="UTF-8"?>
	<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd">

		<bean id = "addressBean" class="com.avishek.Address">
			<constructor-arg value="Bangalore"></constructor-arg>
			<constructor-arg value="560095"></constructor-arg>
		</bean>
		
		<bean id = "employeeBean" class="com.avishek.Employee">
			<property name="add" ref="addressBean"></property>
			<property name="name" value="Avishek"></property>
			<property name="age" value="22"></property>
		</bean>

	</beans>


	We can also make them as to make the bean inner bean available only to the outer bean
	<bean id = "employeeBean" class="com.avishek.Employee">
		<property name="add">
			<bean id = "addressBean" class="com.avishek.Address">
				<constructor-arg value="Bangalore"></constructor-arg>
				<constructor-arg value="560096"></constructor-arg>
			</bean>
		</property>
		<property name="name" value="Avishek"></property>
		<property name="age" value="22"></property>
	</bean>

3. Interface Injection
	
	Say if the members of the class are of type Set, List or Map.
	Then we create beans as follows:

	<?xml version="1.0" encoding="UTF-8"?>
	<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd">
		
		<bean id ="productBean" class = "com.avishek.Products">
			<property name="fruits">
				<map>
					<entry key="apple" value="red"/>
					<entry key="banana" value="yellow"/>
					<entry key="orange" value="orange"/>
				</map>
			</property>
			
			<property name="bikes">
				<set>
					<value>CBR Honda</value>
					<value>Bandit</value>
				</set>
			</property>
			
			<property name="places">
				<list>
					<value>Amsterdam</value>
					<value>Darjeeling</value>
				</list>
			</property>
		</bean>
		
	</beans>

	File: Products.java
	package com.avishek;

	import java.util.List;
	import java.util.Map;
	import java.util.Set;

	public class Products {
		Map<String, String> fruits;
		List <String> bikes;
		Set<String> places;
		public Map<String, String> getFruits() {
			return fruits;
		}
		public void setFruits(Map<String, String> fruits) {
			this.fruits = fruits;
		}
		public List<String> getBikes() {
			return bikes;
		}
		public void setBikes(List<String> bikes) {
			this.bikes = bikes;
		}
		public Set<String> getPlaces() {
			return places;
		}
		public void setPlaces(Set<String> places) {
			this.places = places;
		}
	}


Bean Factory

We can also inject dependency by using Bean Factory as follows:

	BeanFactory factory = new XmlBeanFactory(new ClassPathResource("beansInfoList.xml"));
	Student st = (Student)factory.getBean("studentBean");
	System.out.println(st.getName());
	System.out.println(st.getAge());

The creation of Spring Bean Configuration File is the same.

Difference between BeanFactory and ApplicationContext

Both BeanFactory and ApplicationContext are IOC containers.Both of them are used to manage life cycle of beans. 
ApplicationContext is derived from BeanFactory to provide added functionality to work in web application.
BeanFactory and ApplicationContext are interfaces.As the ApplicationContext includes all functionality of the 
BeanFactory, it is generally recommended that it be used in preference to the BeanFactory. 
ApplicationContext has added functionalities like Automatic BeanPostProcessor registration,
Automatic BeanFactoryPostProcessor,registration Convenient MessageSource access (for i18n),ApplicationEvent 
publication

Difference between setter and construction injection.

1. Partial Dependency: Setter injection can be used for Partial Dependency. Say we have a class with three members. 
If we have setter injection and if we want to initialize only one member then we can do it by setter injection. 
But if this class has constructor injection with three arguements then we cannot initialize only one member.

2. Overriding: If a class has both constructor and setter injection then setter injection will always override 
constructor injection.

3. Changes: We can easily change the values by using setter injection.

AUTOWIRING

In a large application, where there are many classes, explicit wiring of constructor or property will make XML 
lengthy and hard to debug. So Spring provides autowiring features. Autowiring allows us to automatically inject 
the object dependency.

Advantage: 
Requires less code.

Disadvantage:
No control to the programmer.
Cannot be used for primitive data types and Strings.

There are five modes of Autowiring and they are:

1.	no: It is the default autowiring mode. It means no autowiring bydefault.

2.	byName- The name of the property must be same as the name of the dependent bean.
	Attempts to find a bean in the container whose name (or ID) is same as the name of the property to 
	be wired. If a matching bean is not found, the property will remain unwired. Here, the name of the 
	property of the bean (or class) must be same as the name of the other bean to be wired. 
	The class property must be set by using setter method.Does not work for constructor.

3. 	byType- The type of the property must be same as the type of the dependent bean.
	Here even if the name of the bean and the property name are different, still injection is done 
	if the type is the same. The type of the property to be wired must be same as the type of the dependent bean.
	The class property must be set by using setter method.Does not work for constructor.
	Check the example below.

4. 	constructor: The bean has a constructor. This constructor has an argument. The type of this argument 
	must be same the type of the dependent bean. The class property must be set by using constructor.Does not 
	work for setter method.
	

5. 	Autodetect: Deprecated since Spring 3.
	
	In almost all the examples, plesae remember, that how we configure Address bean does not matter.
	Infact this is what is the significance of Spring. We are not dependent on Address Bean.
	So whether the property is set by using constructor or setter is hardly a concern for Student classs.
	
	Example: AUTOWIRE BY NAME

	File: Student.java
	package com.avishek;

	public class Student {
		String name;
		Address add;
		public String getName() {
			return name;
		}
		public void setName(String name) {
			this.name = name;
		}
		public Address getAdd() {
			return add;
		}
		public void setAdd(Address add) {
			this.add = add;
		}
	}

	File. Address.java
	package com.avishek;

	public class Address {
		String city;
		int pincode;
		public String getCity() {
			return city;
		}
		public void setCity(String city) {
			this.city = city;
		}
		public int getPincode() {
			return pincode;
		}
		public void setPincode(int pincode) {
			this.pincode = pincode;
		}
	}

	File: beansInfoList.xml
	<?xml version="1.0" encoding="UTF-8"?>
	<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd">

		<bean id="add" class="com.avishek.Address">
			<property name="city" value="Bangalore"></property>
			<property name="pincode" value="560095"></property>
		</bean>

		<bean id="studentBean" class="com.avishek.Student" autowire="byName">
			<property name="name" value="Avishek"></property>
		</bean>

	</beans>

	Main.java
	package com.avishek;

	import org.springframework.context.ApplicationContext;
	import org.springframework.context.support.ClassPathXmlApplicationContext;

	public class Main {
		public static void main(String[] args) {
			ApplicationContext context = new ClassPathXmlApplicationContext("beansInfoList.xml");
			Student student = (Student)context.getBean("studentBean");
			System.out.println(student.getName());
			System.out.println(student.getAdd().getCity());
			System.out.println(student.getAdd().getPincode());
		}
	}


	Example: AUTOWIRE BY TYPE

	All the files will be same as above, only the Spring Bean Configuration File is changed a bit as follows:

	<?xml version="1.0" encoding="UTF-8"?>
	<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd">

		<bean id="addressBean" class="com.avishek.Address">
			<property name="city" value="Bangalore"></property>
			<property name="pincode" value="560095"></property>
		</bean>

		<bean id="studentBean" class="com.avishek.Student" autowire="byType">
			<property name="name" value="Avishek"></property>
		</bean>

	</beans>

	Here, we see that the bean name is "addressBean" where as the property name is "Address" still autowiring 
	happens. This is because the type of property add is Address and the bean with class ="com.avishek.Address" 
	matches with it. Hence autowiring takes place.

	EXAMPLE: AUTOWIRE BY CONSTRUCTOR

	FILE: Student.java
	package com.avishek;

	public class Student {
		String name;
		Address add;
		Student(String name, Address add){
			this.name = name;
			this.add = add;
		}
		public String getName() {
			return name;
		}
		public Address getAdd() {
			return add;
		}
	}

	FILE: Address.java
	package com.avishek;

	public class Address {
		String city;
		int pincode;
		public String getCity() {
			return city;
		}
		public void setCity(String city) {
			this.city = city;
		}
		public int getPincode() {
			return pincode;
		}
		public void setPincode(int pincode) {
			this.pincode = pincode;
		}
	}

	FILE: beansInfoList.xml
	<?xml version="1.0" encoding="UTF-8"?>
	<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd">

		<bean id="addressBean" class="com.avishek.Address">
			<property name="city" value="Bangalore"></property>
			<property name="pincode" value="560095"></property>
		</bean>

		<bean id="studentBean" class="com.avishek.Student" autowire="constructor">
			<constructor-arg value="Avishek Gurung"></constructor-arg>
		</bean>

	</beans>

	FILE: Main.java

	package com.avishek;

	import org.springframework.context.ApplicationContext;
	import org.springframework.context.support.ClassPathXmlApplicationContext;

	public class Main {
		public static void main(String[] args) {
			ApplicationContext context = new ClassPathXmlApplicationContext("beansInfoList.xml");
			Student student = (Student)context.getBean("studentBean");
			System.out.println(student.getName());
			System.out.println(student.getAdd().getCity());
			System.out.println(student.getAdd().getPincode());
		}
	}

	if there is one more argument say int age in constructor, then the above example throws some error
	so in that case give type="int" in SPCF, as follows:
	<constructor-arg value="22" type="int"/>
	
FACTORY METHOD

We have seen instantiating classes by using Constructors and setters method. There is another way to instantiate 
object in Spring called the Factory Method. We need to declare a method which is static and returns the object of 
that class, and give the name of the method in Spring Bean Configuration File.

	FILE: Student.java
	package com.avishek;

	public class Student {
		String name;
		int age;
		
		public static Student instantiate(){
			Student student = new Student();
			student.name = "Avishek Gurung";
			student.age = 23;
			return student;
		}
		
		public String getName() {
			return name;
		}

		public int getAge() {
			return age;
		}
	}


	FILE: beansInfoList
	<?xml version="1.0" encoding="UTF-8"?>
	<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd">
		
		<bean id="studentBean" class="com.avishek.Student" factory-method="instantiate"/>
	</beans>

	FILE: Main.java
	package com.avishek;

	import org.springframework.context.ApplicationContext;
	import org.springframework.context.support.ClassPathXmlApplicationContext;

	public class Main {
		public static void main(String[] args) {
			ApplicationContext context = new ClassPathXmlApplicationContext("beansInfoList.xml");
			Student student = (Student)context.getBean("studentBean");
			System.out.println(student.getName());
			System.out.println(student.getAge());
		}
	}


Bean Scope

In Spring user can control the scope of the objects created from a particular bean definition. 
This can be achieved by the attribute "scope" in the tag. Following are the scopes available in the Spring. 

singleton - Returns a single bean instance per Spring IoC container (By Default). 

prototype - Returns a new bean instance each time when requested. 

request - Returns a single bean instance per HTTP request. 

session - Returns a single bean instance per HTTP session. 

globalSession - Returns a single bean instance per global HTTP session.

We will discuss the first two, the remaining three scopes are used in Application Context.

Lets learn through examples:

	FILE: Student.java

	package com.avishek;

	public class Student {
		String name;
		int age;
		public String getName() {
			return name;
		}
		public void setName(String name) {
			this.name = name;
		}
		public int getAge() {
			return age;
		}
		public void setAge(int age) {
			this.age = age;
		}
	}


	FILE: Main.java
	package com.avishek;

	import org.springframework.context.ApplicationContext;
	import org.springframework.context.support.ClassPathXmlApplicationContext;

	public class Main {
		public static void main(String[] args) {
			ApplicationContext context = new ClassPathXmlApplicationContext("beansInfoList.xml");
			Student s1 = (Student)context.getBean("studentBean");
			s1.setAge(24);
			s1.setName("Avishek");
			
			System.out.println(s1.getName());
			System.out.println(s1.getAge());
			
			Student s2 = (Student)context.getBean("studentBean");
			System.out.println(s2.getName());
			System.out.println(s2.getAge());
		}
	}

	For SINGLETON BEAN
	<?xml version="1.0" encoding="UTF-8"?>
	<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd">
		
		<bean id="studentBean" class="com.avishek.Student" scope="singleton"/>
	</beans>

	Output:
	Avishek
	24
	Avishek
	24

	FOR PROTOTYPE BEAN
	<?xml version="1.0" encoding="UTF-8"?>
	<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd">
		
		<bean id="studentBean" class="com.avishek.Student" scope="singleton"/>
	</beans>

	Output:
	Avishek
	24
	null
	0

	By default, the bean scopes are singleton.

	
	
AUTOWIRING By ANNOTATION

So far, we saw that we can autowire Beans in the xml by using "autowire" keyword and giving the respective 
values like "byName","byType" and "constructor". But we can also perform autowiring by using 
Annotation => @Autowired

Annotations are like metadata on the code. It gives information about the code.
To use @Autowired annotation, we need to register AutowiredAnnotationBeanPostProcessor, which can be 
done in two ways:

1. Include <context:annotation-config /> 
	
	Include <context:annotation-config /> in the context xml file as follows:

	<?xml version="1.0" encoding="UTF-8"?>
	<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:context="http://www.springframework.org/schema/context"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.1.xsd">
		
		<context:annotation-config/>

		<bean id="Blah" class="blah.blah.blah">
		</bean>
	</beans>

	Rememeber xmlns:context="http://www.springframework.org/schema/context" is added in beans property and
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.1.xsd
	is addded in schema location

2. Include AutowiredAnnotationBeanPostProcessor
	Include ‘AutowiredAnnotationBeanPostProcessor’ directly in bean configuration file.

	<?xml version="1.0" encoding="UTF-8"?>
	<beans xmlns="http://www.springframework.org/schema/beans"
		
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd">
		
		<bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>

		<bean id="Blah" class="blah.blah.blah">
		</bean>
	</beans>

	No need to add any extralinks here

So coming back to @Autowired, we can perform @Autowired annotation in setter method, constructor or property name. 
Lets see them one by one.

1. @Autowired in Setter Methods

	FILE: Student.java
	package com.avishek.start;

	import org.springframework.beans.factory.annotation.Autowired;

	public class Student {
		String name;
		Address address;
		public String getName() {
			return name;
		}
		public void setName(String name) {
			this.name = name;
		}
		
		public Address getAddress() {
			return address;
		}
		
		@Autowired
		public void setAddress(Address address) {
			this.address = address;
		}
	}

	FILE: Address.java
	package com.avishek.start;

	public class Address {
		String city;
		int pincode;
		public String getCity() {
			return city;
		}
		public void setCity(String city) {
			this.city = city;
		}
		public int getPincode() {
			return pincode;
		}
		public void setPincode(int pincode) {
			this.pincode = pincode;
		}
	}

	FILE: Config.xml
	<?xml version="1.0" encoding="UTF-8"?>
	<beans xmlns="http://www.springframework.org/schema/beans"
		
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd">
		
		<bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>

		<bean id="StudentBean" class="com.avishek.start.Student">
			<property name="name" value="Avishek Gurung"/>
		</bean>
		
		<bean id="AddressBean" class="com.avishek.start.Address">
			<property name="city" value="Bangalore"/>
			<property name="pincode" value="560095"/>
		</bean>

	</beans>

	FILE: Main.java
	package com.avishek.start;

	import org.springframework.context.ApplicationContext;
	import org.springframework.context.support.ClassPathXmlApplicationContext;

	public class Main {
		public static void main(String[] args) {
			ApplicationContext context = new ClassPathXmlApplicationContext("Config.xml");
			Student student = (Student)context.getBean("StudentBean");
			System.out.println(student.getName());
			System.out.println(student.getAddress().getCity());
			System.out.println(student.getAddress().getPincode());
		}
	}

2. @Autowired in Constructor

	The Autoring of Constructor by annotation is pretty similar to above.
	Just that the Student class must have a constructor and @Autowired keyword in Constructor as follows:

	FILE: Student.java
	package com.avishek.start;

	import org.springframework.beans.factory.annotation.Autowired;

	public class Student {
		String name;
		Address address;
		
		@Autowired
		Student(String name, Address address){
			this.name = name;
			this.address = address;
		}
		
		public Address getAddress() {
			return address;
		}
		
		public String getName() {
			return name;
		}
	}

	FILE: Address.java
	package com.avishek.start;

	public class Address {
		String city;
		int pincode;
		public String getCity() {
			return city;
		}
		public void setCity(String city) {
			this.city = city;
		}
		public int getPincode() {
			return pincode;
		}
		public void setPincode(int pincode) {
			this.pincode = pincode;
		}
	}

	FILE: Config.xml
	<?xml version="1.0" encoding="UTF-8"?>
	<beans xmlns="http://www.springframework.org/schema/beans"
		
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd">
		
		<bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>

		<bean id="StudentBean" class="com.avishek.start.Student">
			<constructor-arg value="Avi"/>
		</bean>
		
		<bean id="AddressBean" class="com.avishek.start.Address">
			<property name="city" value="Bangalore"/>
			<property name="pincode" value="560095"/>
		</bean>

	</beans>

	FILE: Main.java
	package com.avishek.start;

	import org.springframework.context.ApplicationContext;
	import org.springframework.context.support.ClassPathXmlApplicationContext;

	public class Main {
		public static void main(String[] args) {
			ApplicationContext context = new ClassPathXmlApplicationContext("Config.xml");
			Student student = (Student)context.getBean("StudentBean");
			System.out.println(student.getName());
			System.out.println(student.getAddress().getCity());
			System.out.println(student.getAddress().getPincode());
		}
	}
	
	use type="particular_type" in case of any error.
	Its a good practice to use type when configuring beans with constructor

3. @Autowired in Property Name
	
	This the simplest of all.
	Just add  @Autowired before the property name and thats it.
	This does not work with constructor, works only with setter methods

	FILE: Student.java
	package com.avishek.start;

	import org.springframework.beans.factory.annotation.Autowired;

	public class Student {
		String name;
		
		@Autowired
		Address address;
		
		public String getName() {
			return name;
		}
		public void setName(String name) {
			this.name = name;
		}
		public Address getAddress() {
			return address;
		}
		public void setAddress(Address address) {
			this.address = address;
		}	
	}

	FILE: Address.java
	package com.avishek.start;

	public class Address {
		String city;
		int pincode;
		public String getCity() {
			return city;
		}
		public void setCity(String city) {
			this.city = city;
		}
		public int getPincode() {
			return pincode;
		}
		public void setPincode(int pincode) {
			this.pincode = pincode;
		}
	}

	FILE: Config.xml
	<?xml version="1.0" encoding="UTF-8"?>
	<beans xmlns="http://www.springframework.org/schema/beans"
		
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd">
		
		<bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>

		<bean id="StudentBean" class="com.avishek.start.Student">
			<property name="name" value="Avishek"/>
		</bean>
		
		<bean id="AddressBean" class="com.avishek.start.Address">
			<property name="city" value="Bangalore"/>
			<property name="pincode" value="560095"/>
		</bean>

	</beans>

	FILE: Main.java
	package com.avishek.start;

	import org.springframework.context.ApplicationContext;
	import org.springframework.context.support.ClassPathXmlApplicationContext;

	public class Main {
		public static void main(String[] args) {
			ApplicationContext context = new ClassPathXmlApplicationContext("Config.xml");
			Student student = (Student)context.getBean("StudentBean");
			System.out.println(student.getName());
			System.out.println(student.getAddress().getCity());
			System.out.println(student.getAddress().getPincode());
		}
	}


Now when Autowired Annotation is used, the Spring will check for the matching bean, eg Address in the above case. 
But if it does not find any matching bean then it throws an exception. So in order to disable this 
check, we can set 'required' attribute to false.

Eg. 
	FILE: Student.java
	package com.avishek.start;

	import org.springframework.beans.factory.annotation.Autowired;

	public class Student {
		String name;
		
		@Autowired(required=false)
		Address address;
		
		public String getName() {
			return name;
		}
		public void setName(String name) {
			this.name = name;
		}
		public Address getAddress() {
			return address;
		}
		public void setAddress(Address address) {
			this.address = address;
		}	
	}


But lets say the Spring finds more than one matching bean, then which one should be used? In such cases we need 
to use @Qualifier annotation

All the files will be same as above, the changed files are given below:

	FILE: Config.xml
	<?xml version="1.0" encoding="UTF-8"?>
	<beans xmlns="http://www.springframework.org/schema/beans"
		
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd">
		
		<bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>

		<bean id="StudentBean" class="com.avishek.start.Student">
			<property name="name" value="Avishek"/>
		</bean>
		
		<bean id="AddressBean1" class="com.avishek.start.Address">
			<property name="city" value="Bangalore"/>
			<property name="pincode" value="560095"/>
		</bean>
		
		<bean id="AddressBean2" class="com.avishek.start.Address">
			<property name="city" value="Darjeeling"/>
			<property name="pincode" value="734101"/>
		</bean>
	</beans>


	FILE:Student.java
	package com.avishek.start;

	import org.springframework.beans.factory.annotation.Autowired;
	import org.springframework.beans.factory.annotation.Qualifier;

	public class Student {
		String name;
		
		@Autowired
		@Qualifier("AddressBean2")
		Address address;
		
		public String getName() {
			return name;
		}
		public void setName(String name) {
			this.name = name;
		}
		public Address getAddress() {
			return address;
		}
		public void setAddress(Address address) {
			this.address = address;
		}
	}


