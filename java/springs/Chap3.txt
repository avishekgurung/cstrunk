

ASPECT ORIENTED PROGRAMMING

The another important feature of Spring is Aspect Oriented Programming aka AOP. The meaning of ASPECT is, 
particular part or feature of something. Lets start learning AOP from example as given below:

Lets say we have a class that has 20 different methods. Whenever we call each method, we need to send a 
notification or say, we need to maintain a log. Then the normal way of approach would be to create a method 
that provides notification or log. And then, write a code that calls this method in all 20 methods. So we see 
that we are writing a code (code that calls the notification method or log method) in 20 different methods. 
Say next day, this requirement is no longer needed and we need to remove these notifications or logs, then wat?
We again need to change the code in 20 different methods.

So AOP provides solution for this. We need not write or change code in 20 different methods. Just changing 
the configuration xml does the Job.

Spring AOP (Aspect-oriented programming) framework is used to modularize cross-cutting concerns in aspects. 
Put it simple, itâ€™s just an interceptor to intercept some processes, for example, when a method is executed, 
Spring AOP can hijack the executing method, and add extra functionality before or after the method execution.	


Aspect: in AOP Aspect is a class where AOP will be implemented.

Join Point: is any point in our program like method execution, exception handling, field access etc. Spring 
supports only method execution as Join point.

Advice: is an action taken at join point by the aspect.
There are four different kinds of advices and their description and implementation is defined below:

	1. Before: It executes before the method is called.
	2. After returning: It executes after the method is called.
	3. After throwing: It executes when the method throws an exception
	4. Around: Combines all the above.

First we need to download another jar called CLIB for using proxy.
Go here: https://github.com/cglib/cglib
And download from: https://github.com/cglib/cglib/releases/tag/RELEASE_3_1
Add to Build Path

1.Before Example.
	
	//target class
	FILE: SampleClass
	package com.avishek;

	public class SampleClass {
		public void display(){
			System.out.println("The display method of sample class");
		}
		public void show(){
			System.out.println("The show method of sample class");
		}
	}

	//interceptor class
	FILE: BeforeAdvisor.java
	package com.avishek;

	import java.lang.reflect.Method;

	import org.springframework.aop.MethodBeforeAdvice;

	class BeforeAdvisor implements MethodBeforeAdvice{
		@Override
		public void before(Method arg0, Object[] arg1, Object arg2)throws Throwable {
			System.out.println("Before method called");
		}
	}
	//contains only the target class information


	FILE: AppContext.xml
	<?xml version="1.0" encoding="UTF-8"?>
	<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd">

		<bean id="SampleClassBean" class="com.avishek.SampleClass"/>
		<bean id="BeforeAdvisor" class="com.avishek.BeforeAdvisor"/>
		
		<bean id="proxy" class="org.springframework.aop.framework.ProxyFactoryBean">
			<property name="target" ref="SampleClassBean"/>
			<property name="interceptorNames">
				<list>
					<value>BeforeAdvisor</value>
				</list>
			</property>
		</bean>
	</beans>

	FILE: Main.java
	package com.avishek;

	import org.springframework.context.ApplicationContext;
	import org.springframework.context.support.ClassPathXmlApplicationContext;

	public class Main {
		public static void main(String[] args) {
			ApplicationContext context = new ClassPathXmlApplicationContext("AppContext.xml");
			SampleClass sc = (SampleClass)context.getBean("proxy",SampleClass.class);
			sc.display();
			sc.show();
		}
	}

	OUTPUT:
	Before method called
	The display method of sample class
	Before method called
	The show method of sample class


Explanation: 

We create three beans in xml. One for the class that will be targetted (SampleClass in the above example), 
another for the interceptor,i.e. the class that intercepts(BeforeAdvisor in the above example) and finally a 
proxy bean. The proxy bean that is for ProxyFactoryClass.

The ProxyFactoryBean class is provided by Spring Famework. It contains 2 properties target and interceptorNames.
The instance of SampleClass class will be considered as target object and the instance of BeforeAdvisor class 
as interceptor. You need to pass the advisor object as the list object as in the xml file

the "before" method takes three arguements as shown above:
before(Method arg0, Object[] arg1, Object arg2)

The arg0 is basically the method that we want to target, so here in the above case it returns "show" and "display"

Object[] arg1 is basically the array of parameters that we pass to the method show() and display(). Say if 
the method display is defined as  display(String name, int age, String comp) and it is called as 
display("avishek",23,"viz") then 

	for(x : arg1){
		System.out.println(x);
	}
	gives us the output
	avishek
	23
	viz

	And arg2 is the target class

2. After Returning

	FILE: Sample.java //target class
	package com.avishek;

	public class Sample {	
		public String displayInfo(String name, int age, String occuption){
			System.out.println(name+" "+age+" "+occuption);
			return "successful";
		}
	}

	FILE: AfterAdvice.java //interceptor class
	package com.avishek;

	import java.lang.reflect.Method;
	import org.springframework.aop.AfterReturningAdvice;

	public class AfterAdvice implements AfterReturningAdvice{
		@Override
		public void afterReturning(Object arg0, Method arg1, Object[] arg2,
				Object arg3) throws Throwable {
			System.out.println("AfterReturningAdvice called");
			System.out.println("The returned param: "+arg0);
			System.out.println("The method called: "+arg1.getName());
			System.out.println("The parameters of the method:");
			for(Object x : arg2){
				System.out.print(x+" ");
			}
			System.out.println();
			System.out.println(arg3.getClass());
		}
	}

	FILE: context.xml
	<?xml version="1.0" encoding="UTF-8"?>
	<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd">

	<bean id="SampleBean" class="com.avishek.Sample"/>
	<bean id="AfterAdviceBean" class="com.avishek.AfterAdvice"/>
	<bean id="proxy" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target" ref="SampleBean"/>
		<property name="interceptorNames">
			<list>
				<value>AfterAdviceBean</value>
			</list>
		</property>
	</bean>
	</beans>

	FILE: MainClass.java
	package com.avishek;

	import org.springframework.context.ApplicationContext;
	import org.springframework.context.support.ClassPathXmlApplicationContext;

	public class MainClass {
		public static void main(String[] args) {
			ApplicationContext context = new ClassPathXmlApplicationContext("context.xml");
			Sample sample = (Sample)context.getBean("proxy",Sample.class);
			sample.displayInfo("Avishek", 23, "Software Engineer");
		}
	}

	OUTPUT:
	Avishek 23 Software Engineer
	AfterReturningAdvice called
	The returned param: successful
	The method called: displayInfo
	The parameters of the method:
	Avishek 23 Software Engineer 
	class com.avishek.Sample

3. After Throwing
	
	FILE: Sample.java
	package com.avishek;

	public class Sample {	
		public void displayInfo(){
			System.out.println("Display called");
			throw new IllegalArgumentException();
		}
	}

	FILE: AfterThrow.java
	package com.avishek;

	import org.springframework.aop.ThrowsAdvice;

	public class AfterThrow implements ThrowsAdvice{
		public void afterThrowing(IllegalArgumentException e) throws Throwable{
			System.out.println("After Throwing Called");
		}
	}

	FILE: context.xml
	<?xml version="1.0" encoding="UTF-8"?>
	<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd">

	<bean id="SampleBean" class="com.avishek.Sample"/>
	<bean id="AfterThrowBean" class="com.avishek.AfterThrow"/>
	<bean id="proxy" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target" ref="SampleBean"/>
		<property name="interceptorNames">
			<list>
				<value>AfterThrowBean</value>
			</list>
		</property>
	</bean>

	</beans>

	FILE: MainClass.java
	package com.avishek;

	import org.springframework.context.ApplicationContext;
	import org.springframework.context.support.ClassPathXmlApplicationContext;

	public class MainClass {
		public static void main(String[] args) {
			ApplicationContext context = new ClassPathXmlApplicationContext("context.xml");
			Sample sample = (Sample)context.getBean("proxy",Sample.class);
			try{
				sample.displayInfo();
			}
			catch(Exception e){
				System.out.println("Exception Caught");
			}
			
		}
	}

	OUTPUT:
	Display called
	After Throwing Called
	Exception Caught


4. AROUND

	Implementation of all the above advices done here.

	FILE: Sample.java
	package com.Hijack;

	public class Sample {
		public String show(String name, int age, String occupation){
			System.out.println("Show method called");
			return "success";
		}
	}

	FILE: Around.java
	package com.Hijack;

	import org.aopalliance.intercept.MethodInterceptor;
	import org.aopalliance.intercept.MethodInvocation;

	public class Around implements MethodInterceptor{
		@Override
		public Object invoke(MethodInvocation methodInvocation) throws Throwable {
			//before code can be executed here
			
			//method name of target class
			String targetMethodName = methodInvocation.getMethod().getName();
			Object arr[] = methodInvocation.getArguments();
			System.out.println("Before Advice called here");
			System.out.println("Method Name "+targetMethodName);
			for(Object x : arr){
				System.out.print(x+" ");
			}
			System.out.println();
			
			try{
				//the method of the target class is now called
				Object result = methodInvocation.proceed();
				//result is the value returned by the method
				
				//after advice code can be written here
				System.out.println("After Returning Advice called here");
			}
			catch(IllegalArgumentException e){
				//after throwing advice code can be written here
				System.out.println("After Throwing Advice called here");
			}
			return null;
		}
	}


	FILE: AroundContext.xml
	<?xml version="1.0" encoding="UTF-8"?>
	<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd">
	<bean id="SampleBean" class="com.Hijack.Sample"/>
	<bean id="AroundBean" class="com.Hijack.Around"/>
	<bean id="proxy" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target" ref="SampleBean"/>
		<property name="interceptorNames">
			<list>
				<value>AroundBean</value>
			</list>
		</property>
	</bean>

	</beans>

	FILE: Main.java
	package com.avishek;

	import org.springframework.context.ApplicationContext;
	import org.springframework.context.support.ClassPathXmlApplicationContext;

	public class Main {
		public static void main(String[] args) {
			ApplicationContext context = new ClassPathXmlApplicationContext("AppContext.xml");
			SampleClass sc = (SampleClass)context.getBean("proxy",SampleClass.class);
			sc.display("avi",22,"viz");
			sc.show();
		}
	}

	OUTPUT: 
	Before Advice called here
	Method Name show
	Avishek Gurung 24 Software Engineer 
	Show method called
	After Returning Advice called here



So far we have seen the implementation of AOP. But the AOP implementation used above is old style. The Spring 
Framework recommends us to use Spring AspectJ AOP implementation over the Spring 1.2 old style dtd based AOP 
implementation because it provides us more control and it is easy to use. AspectJ AOP provides many annotation 
but before that we will learn what is Pointcut.

Pointcut can be considered as RULES which states that, at which particular jointpoints, the advice can be used.

The pointcut annotation is given as follows:
@Pointcut("execution(ReturnType ClassName.methodName(parameterList))")
public void pointCutName(){}

Examples:

@Pointcut("execution(public * *(..))") 
pointcut will be applied on all the public methods in all classes.

@Pointcut("execution(public Operation.*(..))")  
pointcut will be applied on all the public methods of Operation class.

@Pointcut("execution(* Operation.*(..))") 
pointcut will be applied on all the methods of Operation class.

@Pointcut("execution(public Employee.set*(..))") 
pointcut will be applied on all public methods of Employee that starts with the name "set"

@Pointcut("execution(int Operation.*(..))") 
pointcut will be applied on all the methods of Operation class that returns int value.

AspectJ AOP annotations are of various types like @Before, @After, @AfterReturning, @AfterThrowing and @Around

Like the old style AOP, @Around implements all the other AspectJ Annotations. 
The difference between @After and @AfterReturning advice is @After can get us the method name and 
@AfterReturning can give us the return value.

We will discuss the examples one by one. 

Most of the files  will remain the same throughout only the file that uses AspectJ AOP will change.

Lets create the following files that remains constant in all the examples.

	FILE: Target.java
	package com.gurung;

	public class Target {
		public String method1(String name, int age){
			System.out.println("Method 1 called");
			return "true";
		}
		
		public String method2(){
			System.out.println("Method 2 called");
			return "false";
		}
		
		public void method3(String name, int age){
			System.out.println("Method 3 called");
		}
		
		public void method4(){
			System.out.println("Method 4 called");
			throw new IllegalArgumentException();
		}
	}


	FILE: AppContext.xml
	<?xml version="1.0" encoding="UTF-8"?>
	<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd">
		
		<bean class="org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator"/>
		<bean id="TargetBean" class="com.gurung.Target"/>
		<bean id="MyInterceptorBean" class="com.gurung.MyInterceptor"/>

	</beans>


	FILE: Main.java
	package com.gurung;

	import org.springframework.context.ApplicationContext;
	import org.springframework.context.support.ClassPathXmlApplicationContext;

	public class Main {
		public static void main(String[] args) {
			ApplicationContext context = new ClassPathXmlApplicationContext("AppContext.xml");
			Target target = (Target)context.getBean("TargetBean");
			
			target.method1("avi", 22);
			System.out.println();
			
			target.method2();
			System.out.println();
			
			target.method3("abc", 20);
			System.out.println();
			
			try{
				target.method4();
			}
			catch(IllegalArgumentException ex){
				System.out.println("Exception Caught");
			}
			
			System.out.println();
		}
	}


1. @Before AspectJ AOP

	FILE: MyInterceptor.java
	package com.gurung;

	import org.aspectj.lang.JoinPoint; 
	import org.aspectj.lang.annotation.Aspect;
	import org.aspectj.lang.annotation.Before;
	import org.aspectj.lang.annotation.Pointcut;

	@Aspect
	public class MyInterceptor {
		@Pointcut("execution(* Target.*(..))")
		public void myPointCut(){}
		
		@Before("myPointCut()")
		public void beforeAdvice(JoinPoint jointPoint){
			System.out.println("Before Advice called for "+jointPoint.getSignature().getName());
			System.out.println("Arguments: ");
			Object arr[] = jointPoint.getArgs();
			for(Object x: arr){
				System.out.println(x);
			}
		}
	}

	OUTPUT: 
	Before Advice called for method1
	Arguments: 
	avi
	22
	Method 1 called

	Before Advice called for method2
	Arguments: 
	Method 2 called

	Before Advice called for method3
	Arguments: 
	abc
	20
	Method 3 called

	Before Advice called for method4
	Arguments: 
	Method 4 called
	Exception Caught


2. @After Advice
	
	FILE: MyInterceptor.java

	package com.gurung;

	import org.aspectj.lang.JoinPoint; 
	import org.aspectj.lang.annotation.After;
	import org.aspectj.lang.annotation.Aspect;
	import org.aspectj.lang.annotation.Pointcut;

	@Aspect
	public class MyInterceptor {
		@Pointcut("execution(* Target.*(..))")
		public void myPointCut(){}
		
		@After("myPointCut()")
		public void afterAdvice(JoinPoint joinPoint){
			System.out.println("After Advice Called for "+joinPoint.getSignature().getName());
			
		}
	}

	OUTPUT:
	Method 1 called
	After Advice Called for method1

	Method 2 called
	After Advice Called for method2

	Method 3 called
	After Advice Called for method3

	Method 4 called
	After Advice Called for method4
	Exception Caught

3. @AfterReturning

	FILE: MyInterceptor.java
	package com.gurung;

	import org.aspectj.lang.annotation.AfterReturning;
	import org.aspectj.lang.annotation.Aspect;
	import org.aspectj.lang.annotation.Pointcut;

	@Aspect
	public class MyInterceptor {
		@Pointcut("execution(* Target.*(..))")
		public void myPointCut(){}
		
		@AfterReturning(pointcut = "myPointCut()", returning = "returnVal")
		public void afterReturningAdvice(Object returnVal){
			System.out.println("After returning advice called "+returnVal);
		}
	}

	OUTPUT: 
	Method 1 called
	After returning advice called true

	Method 2 called
	After returning advice called false

	Method 3 called
	After returning advice called null

	Method 4 called
	Exception Caught

4. @AfterThrowing

	FILE: MyInterceptor.java

	package com.gurung;

	import org.aspectj.lang.annotation.AfterThrowing;
	import org.aspectj.lang.annotation.Aspect;
	import org.aspectj.lang.annotation.Pointcut;

	@Aspect
	public class MyInterceptor {
		@Pointcut("execution(* Target.*(..))")
		public void myPointCut(){}
		
		@AfterThrowing(pointcut="myPointCut()", throwing="ex")
		public void afterThrowingAdvice(IllegalArgumentException ex){
			System.out.println("After throwing advice called "+ex);
		}
	}

	OUTPUT: 
	Method 1 called

	Method 2 called

	Method 3 called

	Method 4 called
	After throwing advice called java.lang.IllegalArgumentException
	Exception Caught

5. @Around
	
	FILE: MyInterceptor.java

	package com.gurung;

	import org.aspectj.lang.ProceedingJoinPoint;
	import org.aspectj.lang.annotation.AfterThrowing;
	import org.aspectj.lang.annotation.Around;
	import org.aspectj.lang.annotation.Aspect;
	import org.aspectj.lang.annotation.Pointcut;

	@Aspect
	public class MyInterceptor {
		@Pointcut("execution(* Target.*(..))")
		public void myPointCut(){}
		
		@Around("myPointCut()")
		public void aroundAdvice(ProceedingJoinPoint proceedingJoinPoint){
			//Before Advice code here
			System.out.println("Before Called in Around Advice");
			Object arr[] = proceedingJoinPoint.getArgs();
			System.out.println("Method Name: "+proceedingJoinPoint.getSignature().getName());
			System.out.println("Arguments: ");
			for(Object x: arr){
				System.out.println(x);
			}
			
			try{
				//After returning advice code here
				Object result = proceedingJoinPoint.proceed();
				System.out.println("After Returning called in Around Advice");
				System.out.println("Return type "+result);
			}
			catch(Throwable ex){
				//after throwing advice code here
				System.out.println("After Throwing called in Around Advice");
			}
		}
	}

	OUTPUT:
	Before Called in Around Advice
	Method Name: method1
	Arguments: 
	avi
	22
	Method 1 called
	After Returning called in Around Advice
	Return type true

	Before Called in Around Advice
	Method Name: method2
	Arguments: 
	Method 2 called
	After Returning called in Around Advice
	Return type false

	Before Called in Around Advice
	Method Name: method3
	Arguments: 
	abc
	20
	Method 3 called
	After Returning called in Around Advice
	Return type null

	Before Called in Around Advice
	Method Name: method4
	Arguments: 
	Method 4 called
	After Throwing called in Around Advice


Some explanation of few lines
1. @Aspect
	public class MyInterceptor

	This means that the class MyInterceptor is our Aspect class, meaning the class where we are implemnting AOP.

2. @Pointcut("execution(* Target.*(..))")
		public void myPointCut(){}

	Here we are first defining the rules for the point cut. The rules is then glued to the identifier 
	of the pointcut named "myPointCut".

Remembering @Around advice can give us a solution for all the other advices. :)


We can also implement AspectJ AOP by xml. 
Please refer here http://www.javatpoint.com/spring-aop-aspectj-xml-configuration-example 
