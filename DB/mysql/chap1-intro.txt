Introduction

The software application that enables the users to store the data is known as a database. The
database that simply stores the data in the form of tables is called Database Management System or DBMS. But if the database allows the tables to have some relationship between them then its called
RDBMS or Relational Database Management System.

Hence, in RDBMS, a relationship is established between tables by using some primary key or foreign 
keys. So if we have a database where we simply have tables with no relationship between them, then 
its DBMS but if we establish a relationship between the tables then its RDBMS.

Terminologies

1. Database: A database aka schema is a collection of tables, with related data.

2. Table: 	A table is a matrix with data. A table in a database looks like a simple spreadsheet.

3. Column: One column (data element) contains data of one and the same kind, for example the column 
phone numbers.

4. Row: A row (= tuple, entry or record) is a group of related data, for example the data of one 
student.

5. Primary Key: A primary key is unique. A key value can not occur twice in one table. With a key, 
you can find at most one row.

6. Foreign Key: A foreign key is the linking pin between two tables.

7. Compound Key: A compound key (composite key) is a key that consists of multiple columns, because 
one column is not sufficiently unique.

8. Index: An index in a database resembles an index at the back of a book.

9. Referential Integrity: Referential Integrity makes sure that a foreign key value always points to 
an existing row.



CREATE DATABASE

The "create database" command is used to create database in DBMS or RDBMS.
create database [if not exists] database_name;
Eg. create database if not exists student;
Eg. create database student;

The "if not exists" paramters does not create a database if the database with the name "student" 
already exists. 

If we create a database without "if not exists" clause and the database with the name "student" 
already exists, then mysql throws an error. 


USE DATABASE

To use any particular database, we need to give a command.
use database_name;
Eg. use student;


SHOW DATABASE

To view all the databases present in the DBMS, we use show command
show databases;

mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| cdcol              |
| employee           |
| mysql              |
| performance_schema |
| phpmyadmin         |
| student            |
| test               |
+--------------------+
8 rows in set (0.00 sec)

In mysql, the database is same as schema. So we can use "show schemas;" in place of "show databases;"

DROP DATABASE

The deletion of database is done with drop.

drop database [if exists] database_name;
Eg. drop database if exits student;
Eg. drop database student;


TABLE TYPES OR STORAGE ENGINES

The tables that we create in our database can be of different types. The type of tables are also called Storage Engines.

There are several types of storage engines and they are:

a. MyISAM
b. InnoDB
c. MERGE
d. MEMORY (HEAP)
e. ARCHIVE
f. CSV
g. FEDERATED

a. MyISAM
The MyISAM tables are optimized for compression and speed. MyISAM tables are also portable between 
platforms and OSes. The size of MyISAM table can be up to 256TB, which is huge. In addition, MyISAM 
tables can be compressed into read-only tables to save space. At startup, MySQL checks MyISAM tables 
for corruption and even repair them in case of errors. The MyISAM tables are not transaction-safe.

Before MySQL version 5.5, MyISAM is the default storage engine when you create a table without 
explicitly specifying the storage engine. From version 5.5, MySQL uses InnoDB as the default storage 
engine.

b. InnoDB
The InnoDB tables fully support ACID-compliant and transactions. They are also very optimal for 
performance. InnoDB table supports foreign keys, commit, rollback, roll-and forward operations. The 
size of the InnoDB table can be up to 64TB.

Like MyISAM, the InnoDB tables are portable between different platforms and OSes. MySQL also checks 
and repair InnoDB tables, if necessary, at startup.

c. MERGE
A MERGE table is a virtual table that combines multiple MyISAM tables, which has similar structure, 
into one table. The MERGE storage engine is also known as the MRG_MyISAM engine.

Using MERGE table, you can speed up performance in joining multiple tables. MySQL only allows you to 
perform SELECT, DELETE, UPDATE and INSERT operations on the MERGE tables. If you use DROP TABLE 
statement on a MERGE table, only MERGE specification is removed. The underlying tables will not be 
affected.

d. MEMORY
The memory tables are stored in memory and uses hash indexes so that they are faster than MyISAM 
tables. The lifetime of the data of the memory tables depends on the up time of the database server. 
The memory storage engine is formerly known as HEAP.

e. ARCHIVE
The archive storage engine allows you to store a large number of records, which for archiving 
purpose, into a compressed format to save disk space. The archive storage engine compresses a record 
when it is inserted and decompress it using zlib library as it is read.

The archive tables only allows INSERT and SELECT commands. The archive tables do not support indexes, 
so reading records requires a full table scanning.

f. CSV
The CSV storage engine stores data in comma-separated file. A CSV table brings a convenient way to 
migrate data into non-SQL applications such as spreadsheet software.

CSV table does not support NULL data type and read operation requires a full table scan.

g. FEDERATED
The FEDERATED storage engine allows you to manage data from a remote MySQL server without using 
cluster or replication technology. The local federated table stores no data. When you query data from 
a local federated table, the data is pulled automatically from the remote federated tables.


DATA TYPES

A table in DBMS can have numerous columns. Each column must a specific data types. There are many 
different data types in mysql. We will discuss only fewer and useful ones.

TINYINT 	- A very small integer
SMALLINT 	- A small integer
MEDIUMINT 	- A medium-sized integer
INT			- A standard integer
BIGINT		- A large integer
DECIMAL		- A fixed-point number
FLOAT 		- A single-precision floating-point number
DOUBLE 		- A double-precision floating-point number
BIT 		- A bit field
CHAR 		- A fixed-length non-binary (character) string
VARCHAR		- A variable-length non-binary string
TINYBLOB 	- A very small BLOB (binary large object)
BLOB 		- A small BLOB
TEXT 		- A small non-binary string
MEDIUMTEXT	- A medium-sized non-binary string
LONGTEXT 	- A large non-binary string
ENUM 		- An enumeration; each column value may be assigned one enumeration member
SET 		- A set; each column value may be assigned zero or more set members
DATE 		- A date value in ‘CCYY-MM-DD’ format
TIME 		- A time value in ‘hh:mm:ss’ format
DATETIME 	- A date and time value in ‘CCYY-MM-DD hh:mm:ss’ format
timestamp 	- A timestamp value in ‘CCYY-MM-DD hh:mm:ss’ format
YEAR 		- A year value in CCYY or YY format


The create table statement is used to create a table in a database. Please remember that before 
performing any database operations, we need to select which database to use, by giving a command
"use database_name;"